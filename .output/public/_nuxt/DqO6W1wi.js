import{h as p,r as u,c as o,a as l,t as r,l as i,f as c,o as a}from"./CyjY5H8A.js";const g={class:"p-8"},v={class:"text-2xl font-bold mb-4"},_={class:"space-y-4"},b={key:0,class:"mt-4 p-4 bg-gray-100 rounded"},f={key:1,class:"mt-4 p-4 bg-red-100 text-red-700 rounded"},x={__name:"testOrpc",setup(y){const{$rpc:n}=p(),t=u(null),s=u(null),d=async()=>{try{s.value=null,t.value=await n.health.check(),console.log("Health check successful:",t.value)}catch(e){s.value=e,console.error("Health check failed:",e)}},h=async()=>{try{s.value=null,t.value=await n.rules.create({name:"test-rule",description:"Test rule from oRPC client",content:`# Test Rule

This is a test rule.`,tags:["test"],visibility:"public"}),console.log("Rule create successful:",t.value)}catch(e){s.value=e,console.error("Rule create failed:",e)}};return(e,m)=>(a(),o("div",g,[l("h1",v,r(e.$t("test.orpc.title")),1),l("div",_,[l("button",{onClick:d,class:"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"},r(e.$t("test.orpc.healthCheck")),1),l("button",{onClick:h,class:"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"},r(e.$t("test.orpc.ruleCreate")),1),c(t)?(a(),o("div",b,[l("pre",null,r(JSON.stringify(c(t),null,2)),1)])):i("",!0),c(s)?(a(),o("div",f,[l("pre",null,r(JSON.stringify(c(s),null,2)),1)])):i("",!0)])]))}};export{x as default};
