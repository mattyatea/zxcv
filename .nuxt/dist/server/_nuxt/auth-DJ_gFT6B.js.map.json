{"file":"auth-DJ_gFT6B.js","mappings":"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","names":[],"sources":["../../../../stores/auth.ts"],"sourcesContent":["import type { createORPCClient } from \"@orpc/client\";\nimport { defineStore } from \"pinia\";\nimport type { Router } from \"~/server/orpc/router\";\n\ntype RPCClient = ReturnType<typeof createORPCClient<Router>>;\n\ninterface AuthUser {\n\tid: string;\n\temail: string;\n\tusername: string;\n\temailVerified: boolean;\n}\n\ninterface AuthState {\n\tuser: AuthUser | null;\n\taccessToken: string | null;\n\trefreshToken: string | null;\n\tisLoading: boolean;\n}\n\ninterface LoginCredentials {\n\temail: string;\n\tpassword: string;\n}\n\ninterface RegisterData {\n\temail: string;\n\tpassword: string;\n\tname: string;\n\tusername: string;\n}\n\nexport const useAuthStore = defineStore(\"auth\", () => {\n\t// State\n\tconst user = ref<AuthUser | null>(null);\n\tconst accessToken = ref<string | null>(null);\n\tconst refreshToken = ref<string | null>(null);\n\tconst isLoading = ref(false);\n\n\t// Getters\n\tconst isAuthenticated = computed(() => !!user.value && !!accessToken.value);\n\n\t// Initialize from localStorage on client side\n\tconst initializeAuth = () => {\n\t\tif (process.client) {\n\t\t\tconst storedAccessToken = localStorage.getItem(\"access_token\");\n\t\t\tconst storedRefreshToken = localStorage.getItem(\"refresh_token\");\n\t\t\tconst storedUser = localStorage.getItem(\"user\");\n\n\t\t\tif (storedAccessToken) {\n\t\t\t\taccessToken.value = storedAccessToken;\n\t\t\t}\n\t\t\tif (storedRefreshToken) {\n\t\t\t\trefreshToken.value = storedRefreshToken;\n\t\t\t}\n\t\t\tif (storedUser) {\n\t\t\t\ttry {\n\t\t\t\t\tuser.value = JSON.parse(storedUser);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(\"Failed to parse stored user data:\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// Actions\n\tconst login = async (credentials: LoginCredentials) => {\n\t\tisLoading.value = true;\n\t\ttry {\n\t\t\tconst nuxtApp = useNuxtApp();\n\t\t\tconst $rpc = nuxtApp.$rpc as RPCClient;\n\t\t\tconst response = await $rpc.auth.login({\n\t\t\t\temail: credentials.email,\n\t\t\t\tpassword: credentials.password,\n\t\t\t});\n\n\t\t\t// Store tokens and user data\n\t\t\taccessToken.value = response.accessToken;\n\t\t\trefreshToken.value = response.refreshToken;\n\t\t\tuser.value = response.user;\n\n\t\t\t// Persist to localStorage\n\t\t\tif (process.client) {\n\t\t\t\tlocalStorage.setItem(\"access_token\", response.accessToken);\n\t\t\t\tlocalStorage.setItem(\"refresh_token\", response.refreshToken);\n\t\t\t\tlocalStorage.setItem(\"user\", JSON.stringify(response.user));\n\t\t\t}\n\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\t// Clear any existing auth data on error\n\t\t\tawait logout();\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tisLoading.value = false;\n\t\t}\n\t};\n\n\tconst register = async (data: RegisterData) => {\n\t\tisLoading.value = true;\n\t\ttry {\n\t\t\tconst nuxtApp = useNuxtApp();\n\t\t\tconst $rpc = nuxtApp.$rpc as RPCClient;\n\t\t\tconst response = await $rpc.auth.register(data);\n\n\t\t\t// After successful registration, log the user in\n\t\t\tawait login({\n\t\t\t\temail: data.email,\n\t\t\t\tpassword: data.password,\n\t\t\t});\n\n\t\t\treturn response;\n\t\t} finally {\n\t\t\tisLoading.value = false;\n\t\t}\n\t};\n\n\tconst logout = async () => {\n\t\t// Clear state\n\t\tuser.value = null;\n\t\taccessToken.value = null;\n\t\trefreshToken.value = null;\n\n\t\t// Clear localStorage\n\t\tif (process.client) {\n\t\t\tlocalStorage.removeItem(\"access_token\");\n\t\t\tlocalStorage.removeItem(\"refresh_token\");\n\t\t\tlocalStorage.removeItem(\"user\");\n\t\t}\n\n\t\t// Navigate to login\n\t\tawait navigateTo(\"/login\");\n\t};\n\n\tconst refreshAccessToken = async () => {\n\t\tif (!refreshToken.value) {\n\t\t\tthrow new Error(\"No refresh token available\");\n\t\t}\n\n\t\ttry {\n\t\t\tconst nuxtApp = useNuxtApp();\n\t\t\tconst $rpc = nuxtApp.$rpc as RPCClient;\n\t\t\tconst response = await $rpc.auth.refresh({\n\t\t\t\trefreshToken: refreshToken.value,\n\t\t\t});\n\n\t\t\t// Update tokens\n\t\t\taccessToken.value = response.accessToken;\n\t\t\trefreshToken.value = response.refreshToken;\n\n\t\t\t// Update localStorage\n\t\t\tif (process.client) {\n\t\t\t\tlocalStorage.setItem(\"access_token\", response.accessToken);\n\t\t\t\tlocalStorage.setItem(\"refresh_token\", response.refreshToken);\n\t\t\t}\n\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\t// If refresh fails, logout user\n\t\t\tawait logout();\n\t\t\tthrow error;\n\t\t}\n\t};\n\n\tconst fetchCurrentUser = async () => {\n\t\tif (!accessToken.value) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tconst nuxtApp = useNuxtApp();\n\t\t\tconst $rpc = nuxtApp.$rpc as RPCClient;\n\t\t\tconst response = await $rpc.users.settings();\n\t\t\tuser.value = {\n\t\t\t\tid: response.id,\n\t\t\t\temail: response.email,\n\t\t\t\tusername: response.username,\n\t\t\t\temailVerified: response.email_verified,\n\t\t\t};\n\n\t\t\t// Update localStorage\n\t\t\tif (process.client) {\n\t\t\t\tlocalStorage.setItem(\"user\", JSON.stringify(response));\n\t\t\t}\n\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Failed to fetch current user:\", error);\n\t\t\treturn null;\n\t\t}\n\t};\n\n\tconst updateUser = (updatedUser: Partial<AuthUser>) => {\n\t\tif (!user.value) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update user data\n\t\tuser.value = {\n\t\t\t...user.value,\n\t\t\t...updatedUser,\n\t\t};\n\n\t\t// Update localStorage\n\t\tif (process.client) {\n\t\t\tlocalStorage.setItem(\"user\", JSON.stringify(user.value));\n\t\t}\n\t};\n\n\tconst setAuthData = async (data: {\n\t\taccessToken: string;\n\t\trefreshToken: string;\n\t\tuser: AuthUser;\n\t}) => {\n\t\t// Update state\n\t\taccessToken.value = data.accessToken;\n\t\trefreshToken.value = data.refreshToken;\n\t\tuser.value = data.user;\n\n\t\t// Persist to localStorage\n\t\tif (process.client) {\n\t\t\tlocalStorage.setItem(\"access_token\", data.accessToken);\n\t\t\tlocalStorage.setItem(\"refresh_token\", data.refreshToken);\n\t\t\tlocalStorage.setItem(\"user\", JSON.stringify(data.user));\n\t\t}\n\t};\n\n\t// Initialize on store creation\n\tinitializeAuth();\n\n\treturn {\n\t\t// State\n\t\tuser: readonly(user),\n\t\taccessToken: readonly(accessToken),\n\t\trefreshToken: readonly(refreshToken),\n\t\tisLoading: readonly(isLoading),\n\t\t// Getters\n\t\tisAuthenticated,\n\t\t// Actions\n\t\tlogin,\n\t\tregister,\n\t\tlogout,\n\t\trefreshAccessToken,\n\t\tfetchCurrentUser,\n\t\tupdateUser,\n\t\tsetAuthData,\n\t\tinitializeAuth,\n\t};\n});\n"],"version":3}