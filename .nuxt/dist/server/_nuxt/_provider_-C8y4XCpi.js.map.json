{"file":"_provider_-C8y4XCpi.js","mappings":"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","names":["_ssrRenderAttrs","_mergeProps","_push","_parent","_unref","navigateTo","_","_scopeId","_createBlock","_createVNode","_toDisplayString"],"sources":["../../../../pages/auth/callback/[provider].vue"],"sourcesContent":["<template>\n  <div class=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n    <div class=\"max-w-md w-full px-4\">\n      <CommonCard padding=\"lg\" class=\"text-center\">\n        <!-- ローディング状態 -->\n        <div v-if=\"loading\" class=\"space-y-4\">\n          <CommonLoadingSpinner size=\"lg\" class=\"mx-auto\" />\n          <h2 class=\"text-xl font-semibold text-gray-900 dark:text-white\">\n            認証処理中...\n          </h2>\n          <p class=\"text-gray-600 dark:text-gray-400\">\n            {{ providerName }}アカウントで{{ isRegistering ? 'アカウントを作成' : 'ログイン' }}しています\n          </p>\n        </div>\n\n        <!-- エラー状態 -->\n        <div v-else-if=\"error\" class=\"space-y-4\">\n          <div class=\"w-16 h-16 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center mx-auto\">\n            <svg class=\"w-8 h-8 text-red-600 dark:text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </div>\n          <h2 class=\"text-xl font-semibold text-gray-900 dark:text-white\">\n            認証エラー\n          </h2>\n          <p class=\"text-gray-600 dark:text-gray-400\">\n            {{ error }}\n          </p>\n          <div class=\"flex flex-col sm:flex-row gap-3 justify-center mt-6\">\n            <CommonButton variant=\"primary\" @click=\"navigateTo('/auth')\">\n              ログインページに戻る\n            </CommonButton>\n            <CommonButton variant=\"secondary\" @click=\"retry\">\n              もう一度試す\n            </CommonButton>\n          </div>\n        </div>\n\n        <!-- 成功状態 -->\n        <div v-else-if=\"success\" class=\"space-y-4\">\n          <div class=\"w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center mx-auto\">\n            <svg class=\"w-8 h-8 text-green-600 dark:text-green-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\n            </svg>\n          </div>\n          <h2 class=\"text-xl font-semibold text-gray-900 dark:text-white\">\n            認証成功\n          </h2>\n          <p class=\"text-gray-600 dark:text-gray-400\">\n            リダイレクトしています...\n          </p>\n        </div>\n      </CommonCard>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useToast } from \"~/composables/useToast\";\nimport { useAuthStore } from \"~/stores/auth\";\n\n// Props and route\nconst route = useRoute();\nconst router = useRouter();\nconst { $rpc } = useNuxtApp();\nconst authStore = useAuthStore();\nconst { success: toastSuccess, error: toastError } = useToast();\n\n// State\nconst provider = computed(() => route.params.provider as string);\nconst providerName = computed(() => {\n\tconst providers: Record<string, string> = {\n\t\tgoogle: \"Google\",\n\t\tgithub: \"GitHub\",\n\t};\n\treturn providers[provider.value] || provider.value;\n});\n\nconst loading = ref(true);\nconst error = ref<string | null>(null);\nconst success = ref(false);\nconst isRegistering = ref(false);\n\n// Methods\nconst processOAuthCallback = async () => {\n\ttry {\n\t\t// クエリパラメータを取得\n\t\tconst { code, state, error: oauthError } = route.query;\n\n\t\t// デバッグ情報\n\t\tconsole.log(\"OAuth callback params:\", {\n\t\t\tprovider: provider.value,\n\t\t\thasCode: !!code,\n\t\t\thasState: !!state,\n\t\t\thasError: !!oauthError,\n\t\t});\n\n\t\t// エラーチェック\n\t\tif (oauthError) {\n\t\t\tthrow new Error(\"認証がキャンセルされました\");\n\t\t}\n\n\t\tif (!code || !state) {\n\t\t\tthrow new Error(\"認証情報が不足しています\");\n\t\t}\n\n\t\t// stateから情報を取得（registering フラグなど）\n\t\ttry {\n\t\t\t// Base64URL decode\n\t\t\tconst base64 = (state as string).replace(/-/g, \"+\").replace(/_/g, \"/\");\n\t\t\tconst padding = \"=\".repeat((4 - (base64.length % 4)) % 4);\n\t\t\tconst stateData = JSON.parse(atob(base64 + padding));\n\t\t\tisRegistering.value = stateData.action === \"register\";\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to parse state:\", e);\n\t\t\t// state のパースに失敗した場合はデフォルトでログインとして扱う\n\t\t\tisRegistering.value = false;\n\t\t}\n\n\t\t// OAuth コールバック処理\n\t\tconst response = await $rpc.auth.oauthCallback({\n\t\t\tprovider: provider.value,\n\t\t\tcode: code as string,\n\t\t\tstate: state as string,\n\t\t});\n\n\t\t// 認証情報を保存\n\t\tawait authStore.setAuthData({\n\t\t\taccessToken: response.accessToken,\n\t\t\trefreshToken: response.refreshToken,\n\t\t\tuser: response.user,\n\t\t});\n\n\t\t// 成功表示\n\t\tsuccess.value = true;\n\t\ttoastSuccess(\n\t\t\tisRegistering.value\n\t\t\t\t? `${providerName.value}でアカウントを作成しました`\n\t\t\t\t: `${providerName.value}でログインしました`,\n\t\t);\n\n\t\t// リダイレクト\n\t\tsetTimeout(() => {\n\t\t\trouter.push(response.redirectUrl || \"/rules\");\n\t\t}, 1500);\n\t} catch (err) {\n\t\tconsole.error(\"OAuth callback error:\", err);\n\n\t\t// エラーメッセージの設定\n\t\tif (err.message?.includes(\"already exists\")) {\n\t\t\terror.value = \"このアカウントは既に別のユーザーに使用されています\";\n\t\t} else if (err.message?.includes(\"email not verified\")) {\n\t\t\terror.value = \"メールアドレスの確認が必要です\";\n\t\t} else if (err.message?.includes(\"cancelled\")) {\n\t\t\terror.value = \"認証がキャンセルされました\";\n\t\t} else {\n\t\t\terror.value = err.message || \"認証処理中にエラーが発生しました\";\n\t\t}\n\n\t\ttoastError(error.value);\n\t} finally {\n\t\tloading.value = false;\n\t}\n};\n\nconst retry = () => {\n\t// 元のプロバイダーでもう一度認証を試みる\n\tnavigateTo(`/auth?provider=${provider.value}`);\n};\n\n// Lifecycle\nonMounted(() => {\n\tprocessOAuthCallback();\n});\n\n// SEO\nuseHead({\n\ttitle: `${providerName.value}認証 - ZXCV`,\n\tmeta: [{ name: \"robots\", content: \"noindex,nofollow\" }],\n});\n</script>\n\n<style scoped>\n/* アニメーション */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.space-y-4 > * {\n  animation: fadeIn 0.3s ease-out;\n  animation-fill-mode: both;\n}\n\n.space-y-4 > *:nth-child(1) {\n  animation-delay: 0s;\n}\n\n.space-y-4 > *:nth-child(2) {\n  animation-delay: 0.1s;\n}\n\n.space-y-4 > *:nth-child(3) {\n  animation-delay: 0.2s;\n}\n</style>"],"version":3}