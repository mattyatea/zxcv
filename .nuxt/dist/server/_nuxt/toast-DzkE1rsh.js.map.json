{"file":"toast-DzkE1rsh.js","mappings":";;AAcO,MAAM,gBAAgB,YAAY,SAAS,MAAM;AAEvD,QAAM,SAAS,IAAa,EAAE;AAG9B,MAAI,YAAY;AAChB,QAAM,YAAY,CAAC,YAA+B;AACjD,UAAM,QAAe;AAAA,MACpB,IAAI,SAAS,KAAK,KAAK,IAAI,EAAE,SAAS;AAAA,MACtC,UAAU;AAAA,MACV,GAAG;AAAA,IAAA;AAGJ,WAAO,MAAM,KAAK,KAAK;AAGvB,QAAI,MAAM,YAAY,MAAM,WAAW,GAAG;AACzC,iBAAW,MAAM;AAChB,oBAAY,MAAM,EAAE;AAAA,MACrB,GAAG,MAAM,QAAQ;AAAA,IAClB;AAEA,WAAO,MAAM;AAAA,EACd;AAEA,QAAM,cAAc,CAAC,OAAe;AACnC,UAAM,QAAQ,OAAO,MAAM,UAAU,CAAC,MAAM,EAAE,OAAO,EAAE;AACvD,QAAI,QAAQ,IAAI;AACf,aAAO,MAAM,OAAO,OAAO,CAAC;AAAA,IAC7B;AAAA,EACD;AAEA,QAAM,iBAAiB,MAAM;AAC5B,WAAO,QAAQ,CAAA;AAAA,EAChB;AAGA,QAAM,UAAU,CAAC,SAAiB,aAAsB;AACvD,WAAO,UAAU,EAAE,SAAS,MAAM,WAAW,GAAI,aAAa,UAAa,EAAE,SAAA,GAAa;AAAA,EAC3F;AAEA,QAAM,QAAQ,CAAC,SAAiB,aAAsB;AACrD,WAAO,UAAU,EAAE,SAAS,MAAM,SAAS,GAAI,aAAa,UAAa,EAAE,SAAA,GAAa;AAAA,EACzF;AAEA,QAAM,UAAU,CAAC,SAAiB,aAAsB;AACvD,WAAO,UAAU,EAAE,SAAS,MAAM,WAAW,GAAI,aAAa,UAAa,EAAE,SAAA,GAAa;AAAA,EAC3F;AAEA,QAAM,OAAO,CAAC,SAAiB,aAAsB;AACpD,WAAO,UAAU,EAAE,SAAS,MAAM,QAAQ,GAAI,aAAa,UAAa,EAAE,SAAA,GAAa;AAAA,EACxF;AAEA,SAAO;AAAA;AAAA,IAEN,QAAQ,SAAS,MAAM;AAAA;AAAA,IAEvB;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEF,CAAC;","names":[],"sources":["../../../../stores/toast.ts"],"sourcesContent":["import { defineStore } from \"pinia\";\nimport { readonly, ref } from \"vue\";\n\nexport interface Toast {\n\tid: string;\n\tmessage: string;\n\ttype: \"success\" | \"error\" | \"warning\" | \"info\";\n\tduration?: number;\n}\n\ninterface ToastState {\n\ttoasts: Toast[];\n}\n\nexport const useToastStore = defineStore(\"toast\", () => {\n\t// State\n\tconst toasts = ref<Toast[]>([]);\n\n\t// Actions\n\tlet idCounter = 0;\n\tconst showToast = (options: Omit<Toast, \"id\">) => {\n\t\tconst toast: Toast = {\n\t\t\tid: `toast_${Date.now()}_${++idCounter}`,\n\t\t\tduration: 3000,\n\t\t\t...options,\n\t\t};\n\n\t\ttoasts.value.push(toast);\n\n\t\t// Auto-remove after duration\n\t\tif (toast.duration && toast.duration > 0) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tremoveToast(toast.id);\n\t\t\t}, toast.duration);\n\t\t}\n\n\t\treturn toast.id;\n\t};\n\n\tconst removeToast = (id: string) => {\n\t\tconst index = toasts.value.findIndex((t) => t.id === id);\n\t\tif (index > -1) {\n\t\t\ttoasts.value.splice(index, 1);\n\t\t}\n\t};\n\n\tconst clearAllToasts = () => {\n\t\ttoasts.value = [];\n\t};\n\n\t// Helper methods for different types\n\tconst success = (message: string, duration?: number) => {\n\t\treturn showToast({ message, type: \"success\", ...(duration !== undefined && { duration }) });\n\t};\n\n\tconst error = (message: string, duration?: number) => {\n\t\treturn showToast({ message, type: \"error\", ...(duration !== undefined && { duration }) });\n\t};\n\n\tconst warning = (message: string, duration?: number) => {\n\t\treturn showToast({ message, type: \"warning\", ...(duration !== undefined && { duration }) });\n\t};\n\n\tconst info = (message: string, duration?: number) => {\n\t\treturn showToast({ message, type: \"info\", ...(duration !== undefined && { duration }) });\n\t};\n\n\treturn {\n\t\t// State\n\t\ttoasts: readonly(toasts),\n\t\t// Actions\n\t\tshowToast,\n\t\tremoveToast,\n\t\tclearAllToasts,\n\t\t// Helper methods\n\t\tsuccess,\n\t\terror,\n\t\twarning,\n\t\tinfo,\n\t};\n});\n"],"version":3}