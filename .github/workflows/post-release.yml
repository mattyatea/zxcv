name: Post-Release Actions

on:
  push:
    branches: [main]
    paths:
      - 'package.json'
      - 'server/package.json' 
      - 'cli/package.json'

# Prevent multiple post-release actions from running simultaneously
concurrency:
  group: post-release
  cancel-in-progress: false

jobs:
  check-release:
    name: Check for Release
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check.outputs.is_release }}
      version: ${{ steps.check.outputs.version }}
      include_cli: ${{ steps.check.outputs.include_cli }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if this is a release commit
        id: check
        run: |
          # Check if the commit message indicates a version bump
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Commit message: $COMMIT_MSG"
          
          if [[ "$COMMIT_MSG" =~ ^chore:\ bump\ version\ to\ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
            
            # Extract version from commit message
            VERSION=$(echo "$COMMIT_MSG" | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+" | head -1)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            
            # Check if CLI was updated
            if git diff HEAD~1..HEAD --name-only | grep -q "cli/package.json"; then
              echo "include_cli=true" >> $GITHUB_OUTPUT
            else
              echo "include_cli=false" >> $GITHUB_OUTPUT
            fi
            
            echo "‚úÖ Release detected: $VERSION"
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Not a release commit"
          fi

  finalize-release:
    name: Finalize Release
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.is_release == 'true'
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Wait for deployment to complete
        run: |
          echo "‚è≥ Waiting for production deployment to complete..."
          
          # Wait for deployment to start
          sleep 30
          
          # Check GitHub deployment status
          DEPLOYMENT_ID=""
          MAX_ATTEMPTS=20
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            echo "Checking deployment status (attempt $((ATTEMPT + 1))/$MAX_ATTEMPTS)..."
            
            # Get the latest deployment for production environment
            DEPLOYMENT_DATA=$(gh api repos/${{ github.repository }}/deployments \
              --jq '.[] | select(.environment == "production") | select(.created_at > (now - 300)) | .[0]' 2>/dev/null || echo "")
            
            if [ -n "$DEPLOYMENT_DATA" ]; then
              DEPLOYMENT_ID=$(echo "$DEPLOYMENT_DATA" | jq -r '.id // empty' 2>/dev/null || echo "")
              
              if [ -n "$DEPLOYMENT_ID" ]; then
                # Check deployment status
                STATUS=$(gh api repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses \
                  --jq '.[0].state // empty' 2>/dev/null || echo "")
                
                echo "Deployment $DEPLOYMENT_ID status: $STATUS"
                
                case "$STATUS" in
                  "success")
                    echo "‚úÖ Deployment completed successfully!"
                    break
                    ;;
                  "failure"|"error")
                    echo "‚ùå Deployment failed!"
                    exit 1
                    ;;
                  "pending"|"in_progress")
                    echo "‚è≥ Deployment still in progress..."
                    ;;
                  *)
                    echo "üîç Unknown deployment status: $STATUS"
                    ;;
                esac
              fi
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              sleep 15
            fi
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "‚ö†Ô∏è Deployment status check timed out, proceeding with release finalization"
            echo "Please verify deployment manually: https://zxcv.nanasi-apps.xyz"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Git tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          VERSION="${{ needs.check-release.outputs.version }}"
          
          # Check if tag already exists
          if git tag -l "$VERSION" | grep -q "$VERSION"; then
            echo "‚ö†Ô∏è Tag $VERSION already exists, skipping tag creation"
          else
            # Create tag with error handling
            if ! git tag -a "$VERSION" -m "Release $VERSION

            üöÄ Production release created automatically after successful deployment.

            ü§ñ Generated with [Claude Code](https://claude.ai/code)

            Co-Authored-By: Claude <noreply@anthropic.com>"; then
              echo "‚ùå Failed to create Git tag $VERSION"
              exit 1
            fi
            
            # Push tag with error handling and retry
            RETRY_COUNT=0
            MAX_RETRIES=3
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if git push origin "$VERSION"; then
                echo "‚úÖ Created and pushed tag: $VERSION"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "‚ö†Ô∏è Failed to push tag (attempt $RETRY_COUNT/$MAX_RETRIES)"
                
                if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                  echo "‚ùå Failed to push tag after $MAX_RETRIES attempts"
                  echo "Tag created locally but not pushed to remote"
                  
                  # Clean up local tag
                  git tag -d "$VERSION" 2>/dev/null || true
                  exit 1
                fi
                
                sleep 5
              fi
            done
          fi

      - name: Update GitHub release from draft
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          
          # Generate final release notes
          LATEST_TAG=$(git describe --tags --abbrev=0 "$VERSION"^ 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log $LATEST_TAG..$VERSION --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Update the draft release to published
          gh release edit "$VERSION" \
            --title "üöÄ Release $VERSION" \
            --notes "$(cat <<EOF
          ## üéâ What's New
          
          $CHANGELOG
          
          ## üåê Web Application
          
          - **Production**: https://zxcv.nanasi-apps.xyz
          - **Staging**: https://zxcv-staging.mattyatea.me
          
          $(if [ "${{ needs.check-release.outputs.include_cli }}" == "true" ]; then echo "## üì¶ CLI Tool"; echo ""; echo "Download the appropriate binary for your platform from the assets below."; echo ""; echo '```bash'; echo '# Install CLI (replace with actual download URL)'; echo 'curl -L https://github.com/mattyatea/zxcv/releases/download/$VERSION/zxcv-[platform] -o zxcv'; echo 'chmod +x zxcv'; echo 'sudo mv zxcv /usr/local/bin/'; echo '```'; fi)
          
          ---
          
          ü§ñ **Automated Release** - This release was created automatically after successful production deployment.
          
          For issues or questions, please visit our [GitHub Issues](https://github.com/mattyatea/zxcv/issues).
          EOF
          )" \
            --draft=false
          
          echo "‚úÖ Published GitHub release: $VERSION"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build CLI release assets (if needed)
        if: needs.check-release.outputs.include_cli == 'true'
        run: |
          echo "üî® Building CLI release assets..."
          cd cli
          
          # Setup Bun for CLI builds
          curl -fsSL https://bun.sh/install | bash
          export PATH="$HOME/.bun/bin:$PATH"
          
          bun install
          bun run build:cross || {
            echo "‚ö†Ô∏è Cross-platform build not available, building for current platform only"
            bun run build
          }
          
          echo "‚úÖ CLI assets built"

      - name: Upload CLI assets to release
        if: needs.check-release.outputs.include_cli == 'true'
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          cd cli
          
          # Check if release directory exists (from cross-platform builds)
          if [ -d "release" ]; then
            echo "üì¶ Uploading cross-platform CLI assets..."
            for file in release/*; do
              if [ -f "$file" ]; then
                gh release upload "$VERSION" "$file" || echo "Failed to upload $file"
              fi
            done
          elif [ -f "dist/zxcv" ]; then
            echo "üì¶ Uploading single platform CLI asset..."
            gh release upload "$VERSION" "dist/zxcv" || echo "Failed to upload CLI binary"
          else
            echo "‚ö†Ô∏è No CLI assets found to upload"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge back to dev
        run: |
          echo "üîÑ Merging release changes back to dev branch..."
          
          # Fetch latest changes with error handling
          if ! git fetch origin; then
            echo "‚ùå Failed to fetch from origin"
            exit 1
          fi
          
          # Checkout dev branch with error handling
          if ! git checkout dev; then
            echo "‚ùå Failed to checkout dev branch"
            exit 1
          fi
          
          # Pull latest dev changes
          if ! git pull origin dev; then
            echo "‚ùå Failed to pull latest dev changes"
            exit 1
          fi
          
          # Merge main into dev to keep branches in sync
          if ! git merge origin/main --no-ff -m "chore: merge release ${{ needs.check-release.outputs.version }} back to dev

          üîÑ Automatic merge after successful release.

          ü§ñ Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"; then
            echo "‚ùå Failed to merge main into dev"
            echo "This might be due to merge conflicts."
            echo "Manual intervention required."
            
            # Show conflict information
            git status || true
            echo "Please resolve conflicts manually and complete the merge."
            exit 1
          fi
          
          # Push merged changes with retry
          RETRY_COUNT=0
          MAX_RETRIES=3
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if git push origin dev; then
              echo "‚úÖ Merged release changes back to dev"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "‚ö†Ô∏è Failed to push to dev (attempt $RETRY_COUNT/$MAX_RETRIES)"
              
              if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "‚ùå Failed to push dev branch after $MAX_RETRIES attempts"
                exit 1
              fi
              
              sleep 5
            fi
          done

      - name: Clean up release branch
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          RELEASE_BRANCH="release/$VERSION"
          
          # Delete remote release branch if it exists
          if git ls-remote --heads origin "$RELEASE_BRANCH" | grep -q "$RELEASE_BRANCH"; then
            git push origin --delete "$RELEASE_BRANCH"
            echo "‚úÖ Deleted remote release branch: $RELEASE_BRANCH"
          else
            echo "‚ÑπÔ∏è Release branch $RELEASE_BRANCH not found or already deleted"
          fi

      - name: Summary
        run: |
          echo "üéâ Release ${{ needs.check-release.outputs.version }} finalized successfully!"
          echo ""
          echo "üìã Summary:"
          echo "  - ‚úÖ Git tag created and pushed"
          echo "  - ‚úÖ GitHub release published"
          echo "  - ‚úÖ Changes merged back to dev branch"
          echo "  - ‚úÖ Release branch cleaned up"
          $(if [ "${{ needs.check-release.outputs.include_cli }}" == "true" ]; then echo "  - ‚úÖ CLI assets uploaded"; fi)
          echo ""
          echo "üåê Live at: https://zxcv.nanasi-apps.xyz"
          echo "üì¶ Release: https://github.com/mattyatea/zxcv/releases/tag/${{ needs.check-release.outputs.version }}"