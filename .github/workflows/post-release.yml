name: Post-Release Actions

on:
  push:
    branches: [main]
    paths:
      - 'package.json'
      - 'server/package.json' 
      - 'cli/package.json'

jobs:
  check-release:
    name: Check for Release
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check.outputs.is_release }}
      version: ${{ steps.check.outputs.version }}
      include_cli: ${{ steps.check.outputs.include_cli }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if this is a release commit
        id: check
        run: |
          # Check if the commit message indicates a version bump
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Commit message: $COMMIT_MSG"
          
          if [[ "$COMMIT_MSG" =~ ^chore:\ bump\ version\ to\ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
            
            # Extract version from commit message
            VERSION=$(echo "$COMMIT_MSG" | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+" | head -1)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            
            # Check if CLI was updated
            if git diff HEAD~1..HEAD --name-only | grep -q "cli/package.json"; then
              echo "include_cli=true" >> $GITHUB_OUTPUT
            else
              echo "include_cli=false" >> $GITHUB_OUTPUT
            fi
            
            echo "‚úÖ Release detected: $VERSION"
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Not a release commit"
          fi

  finalize-release:
    name: Finalize Release
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.is_release == 'true'
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Wait for deployment to complete
        run: |
          echo "‚è≥ Waiting for production deployment to complete..."
          sleep 60  # Give time for deployment to start
          
          # Check deployment status (simplified - could be enhanced)
          echo "‚úÖ Assuming deployment completed successfully"

      - name: Create Git tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          VERSION="${{ needs.check-release.outputs.version }}"
          
          git tag -a "$VERSION" -m "Release $VERSION

          üöÄ Production release created automatically after successful deployment.

          ü§ñ Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          git push origin "$VERSION"
          echo "‚úÖ Created and pushed tag: $VERSION"

      - name: Update GitHub release from draft
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          
          # Generate final release notes
          LATEST_TAG=$(git describe --tags --abbrev=0 "$VERSION"^ 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log $LATEST_TAG..$VERSION --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Update the draft release to published
          gh release edit "$VERSION" \
            --title "üöÄ Release $VERSION" \
            --notes "$(cat <<EOF
          ## üéâ What's New
          
          $CHANGELOG
          
          ## üåê Web Application
          
          - **Production**: https://zxcv.nanasi-apps.xyz
          - **Staging**: https://zxcv-staging.mattyatea.me
          
          $(if [ "${{ needs.check-release.outputs.include_cli }}" == "true" ]; then echo "## üì¶ CLI Tool"; echo ""; echo "Download the appropriate binary for your platform from the assets below."; echo ""; echo '```bash'; echo '# Install CLI (replace with actual download URL)'; echo 'curl -L https://github.com/mattyatea/zxcv/releases/download/$VERSION/zxcv-[platform] -o zxcv'; echo 'chmod +x zxcv'; echo 'sudo mv zxcv /usr/local/bin/'; echo '```'; fi)
          
          ---
          
          ü§ñ **Automated Release** - This release was created automatically after successful production deployment.
          
          For issues or questions, please visit our [GitHub Issues](https://github.com/mattyatea/zxcv/issues).
          EOF
          )" \
            --draft=false
          
          echo "‚úÖ Published GitHub release: $VERSION"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build CLI release assets (if needed)
        if: needs.check-release.outputs.include_cli == 'true'
        run: |
          echo "üî® Building CLI release assets..."
          cd cli
          
          # Setup Bun for CLI builds
          curl -fsSL https://bun.sh/install | bash
          export PATH="$HOME/.bun/bin:$PATH"
          
          bun install
          bun run build:cross || {
            echo "‚ö†Ô∏è Cross-platform build not available, building for current platform only"
            bun run build
          }
          
          echo "‚úÖ CLI assets built"

      - name: Upload CLI assets to release
        if: needs.check-release.outputs.include_cli == 'true'
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          cd cli
          
          # Check if release directory exists (from cross-platform builds)
          if [ -d "release" ]; then
            echo "üì¶ Uploading cross-platform CLI assets..."
            for file in release/*; do
              if [ -f "$file" ]; then
                gh release upload "$VERSION" "$file" || echo "Failed to upload $file"
              fi
            done
          elif [ -f "dist/zxcv" ]; then
            echo "üì¶ Uploading single platform CLI asset..."
            gh release upload "$VERSION" "dist/zxcv" || echo "Failed to upload CLI binary"
          else
            echo "‚ö†Ô∏è No CLI assets found to upload"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge back to dev
        run: |
          echo "üîÑ Merging release changes back to dev branch..."
          
          git fetch origin
          git checkout dev
          git pull origin dev
          
          # Merge main into dev to keep branches in sync
          git merge origin/main --no-ff -m "chore: merge release ${{ needs.check-release.outputs.version }} back to dev

          üîÑ Automatic merge after successful release.

          ü§ñ Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          git push origin dev
          
          echo "‚úÖ Merged release changes back to dev"

      - name: Clean up release branch
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          RELEASE_BRANCH="release/$VERSION"
          
          # Delete remote release branch if it exists
          if git ls-remote --heads origin "$RELEASE_BRANCH" | grep -q "$RELEASE_BRANCH"; then
            git push origin --delete "$RELEASE_BRANCH"
            echo "‚úÖ Deleted remote release branch: $RELEASE_BRANCH"
          else
            echo "‚ÑπÔ∏è Release branch $RELEASE_BRANCH not found or already deleted"
          fi

      - name: Summary
        run: |
          echo "üéâ Release ${{ needs.check-release.outputs.version }} finalized successfully!"
          echo ""
          echo "üìã Summary:"
          echo "  - ‚úÖ Git tag created and pushed"
          echo "  - ‚úÖ GitHub release published"
          echo "  - ‚úÖ Changes merged back to dev branch"
          echo "  - ‚úÖ Release branch cleaned up"
          $(if [ "${{ needs.check-release.outputs.include_cli }}" == "true" ]; then echo "  - ‚úÖ CLI assets uploaded"; fi)
          echo ""
          echo "üåê Live at: https://zxcv.nanasi-apps.xyz"
          echo "üì¶ Release: https://github.com/mattyatea/zxcv/releases/tag/${{ needs.check-release.outputs.version }}"