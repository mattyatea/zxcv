name: Manual Deploy

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: "Manual Deploy to Cloudflare"
    # 環境に応じて production または staging を使用
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
      - name: Now Environment
        run: |
          echo "Deploying to environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: |
          # Set Prisma engine download timeout and retry
          export PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING=1
          export PRISMA_ENGINES_MIRROR=https://binaries.prisma.sh
          
          # Retry mechanism for network issues
          n=0
          until [ "$n" -ge 3 ]
          do
             pnpm prisma:generate && break
             n=$((n+1))
             echo "Attempt $n failed, retrying in 5 seconds..."
             sleep 5
          done
          
          if [ "$n" -ge 3 ]; then
            echo "Failed to generate Prisma Client after 3 attempts"
            exit 1
          fi

      - name: Build
        run: pnpm build:server
        env:
          WORKER_NAME: ${{ github.ref == 'refs/heads/main' && 'zxcv-backend-and-frontend' || 'zxcv-backend-and-frontend-staging' }}
          DB_NAME: ${{ github.ref == 'refs/heads/main' && 'zxcv-db' || 'zxcv-staging' }}
          DB_ID: ${{ github.ref == 'refs/heads/main' && 'ee2c13b9-0d5b-49ea-9bf4-5a65e2f7ad4e' || 'e3bce64a-4462-4812-a343-c04c3ba7032a' }}
          R2_BUCKET: ${{ github.ref == 'refs/heads/main' && 'zxcv' || 'zxcv-staging' }}

      - name: Debug - List wrangler config files
        run: |
          cd server
          echo "=== Listing wrangler config files ==="
          ls -la wrangler* || echo "No wrangler files found"
          echo "=== Checking for .output/server/wrangler.json ==="
          ls -la .output/server/wrangler* 2>/dev/null || echo "No wrangler files in .output/server"
          
      - name: Run migrations
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 migrations apply DB --remote -c wrangler.toml ${{ github.ref == 'refs/heads/main' && '' || '--env staging' }}
          workingDirectory: 'server'
          
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy -c wrangler.toml ${{ github.ref == 'refs/heads/main' && '' || '--env staging' }}
          workingDirectory: 'server'
          secrets: |
            JWT_SECRET
            GOOGLE_CLIENT_ID
            GOOGLE_CLIENT_SECRET
            GH_OAUTH_CLIENT_ID
            GH_OAUTH_CLIENT_SECRET
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GH_OAUTH_CLIENT_ID: ${{ secrets.GH_OAUTH_CLIENT_ID }}
          GH_OAUTH_CLIENT_SECRET: ${{ secrets.GH_OAUTH_CLIENT_SECRET }}