name: Deploy

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./backend
      
      - name: Generate Prisma Client
        run: pnpm prisma:generate
        working-directory: ./backend
      
      
      - name: Run database migrations (staging)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 migrations apply ${{ secrets.D1_DATABASE_NAME || 'zxcv-db' }} --remote
          workingDirectory: ./backend
          packageManager: pnpm
      
      - name: Deploy to Cloudflare Workers (staging)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env staging
          packageManager: pnpm
          workingDirectory: ./backend
          secrets: |
            JWT_SECRET
            REFRESH_TOKEN_SECRET
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
      
      - name: Health check (staging)
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 30
          curl -f ${{ secrets.STAGING_URL }}/health || exit 1
          echo "Staging deployment successful"

  deploy-production:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./backend
      
      - name: Generate Prisma Client
        run: pnpm prisma:generate
        working-directory: ./backend
      
      - name: Run database migrations (production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 migrations apply ${{ secrets.D1_DATABASE_NAME || 'zxcv-db' }} --remote
          workingDirectory: ./backend
          packageManager: pnpm
      
      - name: Deploy to Cloudflare Workers (production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          packageManager: pnpm
          workingDirectory: ./backend
          secrets: |
            JWT_SECRET
            REFRESH_TOKEN_SECRET
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
      
      - name: Health check (production)
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 30
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
          echo "Production deployment successful"
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Production deployment successful!"
          echo "Deployment completed at $(date)"
      
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Please check the logs and fix the issues"