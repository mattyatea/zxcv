name: Test Server

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'server/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/test-server.yml'
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'server/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/test-server.yml'
  workflow_dispatch:

jobs:
  test-server:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10.12.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm -F server prisma:generate

      - name: Generate Cloudflare types (optional)
        run: cd server && pnpm run cf-typegen || true

      - name: Type check
        run: pnpm run typecheck:server

      - name: Lint and format check
        run: pnpm -F server check

      - name: Run server tests
        run: pnpm -F server test
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci
          REFRESH_TOKEN_SECRET: test-refresh-token-secret-for-ci

  build-server:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: test-server

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10.12.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm -F server prisma:generate

      - name: Generate Cloudflare types (optional)
        run: cd server && pnpm run cf-typegen || true

      - name: Build Nuxt application
        run: pnpm -F server build

      - name: Verify build output
        run: |
          if [ -d "server/.output" ]; then
            echo "✅ Build output directory exists"
            ls -la server/.output/
          else
            echo "❌ Build output directory not found"
            exit 1
          fi

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    needs: build-server
    name: Deploy to Cloudflare Workers
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm -F server prisma:generate

      - name: Build
        run: pnpm build:server

      - name: Run migrations
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 migrations apply zxcv-db --remote
          workingDirectory: 'server'
          
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          workingDirectory: 'server'
          secrets: |
            JWT_SECRET
            GOOGLE_CLIENT_ID
            GOOGLE_CLIENT_SECRET
            GH_OAUTH_CLIENT_ID
            GH_OAUTH_CLIENT_SECRET
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GH_OAUTH_CLIENT_ID: ${{ secrets.GH_OAUTH_CLIENT_ID }}
          GH_OAUTH_CLIENT_SECRET: ${{ secrets.GH_OAUTH_CLIENT_SECRET }}