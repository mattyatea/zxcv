// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum RuleType {
  rule
  ccsubagents
}

enum UserRole {
  user
  moderator
  admin
}

model User {
  id           String   @id
  email        String   @unique
  username     String   @unique
  role         UserRole @default(user) @map("role")
  passwordHash String?  @map("password_hash") // Nullable for OAuth users
  emailVerified Boolean  @default(false) @map("email_verified")
  settings     String   @default("{}") // JSON string for user settings
  displayName  String?  @map("display_name") // User's display name
  bio          String?  // User's biography/description
  location     String?  // User's location
  website      String?  // User's website URL
  avatarUrl    String?  @map("avatar_url") // Avatar image URL (R2 object key)
  createdAt    Int      @default(dbgenerated("(unixepoch())")) @map("created_at")
  updatedAt    Int      @default(dbgenerated("(unixepoch())")) @map("updated_at")

  rules         Rule[]
  ruleVersions  RuleVersion[]
  ownedOrganizations    Organization[]
  organizationMembers   OrganizationMember[]
  apiKeys       ApiKey[]
  ruleStars     RuleStar[]
  ruleViews     RuleView[]
  passwordResets PasswordReset[]
  emailVerifications EmailVerification[]
  oauthAccounts OAuthAccount[]
  organizationInvitations OrganizationInvitation[] @relation("inviter")
  deviceCodes   DeviceCode[]
  cliTokens     CliToken[]

  @@index([email])
  @@index([username])
  @@map("users")
}

model Rule {
  id              String  @id
  name            String
  userId          String  @map("user_id")
  type            RuleType @default(rule)
  visibility      String
  description     String?
  tags            String? // JSON array stored as text
  createdAt       Int     @default(dbgenerated("(unixepoch())")) @map("created_at")
  updatedAt       Int     @default(dbgenerated("(unixepoch())")) @map("updated_at")
  publishedAt     Int?    @map("published_at")
  version         String  @default("1.0.0")
  latestVersionId String? @map("latest_version_id")
  views           Int     @default(0)
  stars           Int     @default(0)
  organizationId  String? @map("organization_id")

  user          User           @relation(fields: [userId], references: [id])
  organization  Organization?  @relation(fields: [organizationId], references: [id])
  versions      RuleVersion[]
  starredBy     RuleStar[]
  viewedBy      RuleView[]

  // Unique constraint removed - will be handled at application level
  @@index([userId])
  @@index([visibility])
  @@index([name])
  @@index([updatedAt])
  @@index([organizationId])
  @@index([type])
  @@map("rules")
}

model RuleVersion {
  id            String  @id
  ruleId        String  @map("rule_id")
  versionNumber String  @map("version_number")
  changelog     String?
  contentHash   String  @map("content_hash")
  r2ObjectKey   String  @map("r2_object_key")
  createdAt     Int     @default(dbgenerated("(unixepoch())")) @map("created_at")
  createdBy     String  @map("created_by")

  rule    Rule @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  creator User @relation(fields: [createdBy], references: [id])

  @@unique([ruleId, versionNumber])
  @@index([ruleId])
  @@index([createdBy])
  @@map("rule_versions")
}

model Organization {
  id          String  @id
  name        String  @unique
  displayName String  @map("display_name")
  description String?
  ownerId     String  @map("owner_id")
  createdAt   Int     @default(dbgenerated("(unixepoch())")) @map("created_at")
  updatedAt   Int     @default(dbgenerated("(unixepoch())")) @map("updated_at")

  owner   User         @relation(fields: [ownerId], references: [id])
  members OrganizationMember[]
  rules   Rule[]
  invitations OrganizationInvitation[]

  @@index([name])
  @@index([ownerId])
  @@map("organizations")
}

model OrganizationMember {
  id       String @id
  organizationId   String @map("organization_id")
  userId   String @map("user_id")
  role     String
  joinedAt Int    @default(dbgenerated("(unixepoch())")) @map("joined_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@map("organization_members")
}

model RateLimit {
  key     String @id
  count   Int    @default(0)
  resetAt Int    @map("reset_at")

  @@index([resetAt])
  @@map("rate_limits")
}

model ApiKey {
  id         String  @id
  userId     String  @map("user_id")
  name       String
  keyHash    String  @unique @map("key_hash")
  lastUsedAt Int?    @map("last_used_at")
  expiresAt  Int?    @map("expires_at")
  scopes     String? // JSON array stored as text
  createdAt  Int     @default(dbgenerated("(unixepoch())")) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([keyHash])
  @@index([userId])
  @@index([expiresAt])
  @@map("api_keys")
}

model RuleStar {
  id        String @id
  ruleId    String @map("rule_id")
  userId    String @map("user_id")
  createdAt Int    @default(dbgenerated("(unixepoch())")) @map("created_at")

  rule Rule @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@unique([ruleId, userId])
  @@index([ruleId])
  @@index([userId])
  @@map("rule_stars")
}

model RuleView {
  id        String  @id
  ruleId    String  @map("rule_id")
  userId    String? @map("user_id")
  ipAddress String  @map("ip_address")
  userAgent String  @map("user_agent")
  createdAt Int     @default(dbgenerated("(unixepoch())")) @map("created_at")

  rule Rule  @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id])

  @@index([ruleId])
  @@index([userId])
  @@index([createdAt])
  @@map("rule_views")
}

model PasswordReset {
  id        String @id
  userId    String @map("user_id")
  token     String @unique
  expiresAt Int    @map("expires_at")
  usedAt    Int?   @map("used_at")
  createdAt Int    @default(dbgenerated("(unixepoch())")) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@map("password_resets")
}

model EmailVerification {
  id        String @id
  userId    String @map("user_id")
  token     String @unique
  expiresAt Int    @map("expires_at")
  usedAt    Int?   @map("used_at")
  createdAt Int    @default(dbgenerated("(unixepoch())")) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@map("email_verifications")
}

model OAuthAccount {
  id          String @id
  userId      String @map("user_id")
  provider    String // google, github
  providerId  String @map("provider_id") // ID from OAuth provider
  email       String? // Email from OAuth provider
  username    String? // Username from OAuth provider (GitHub)
  createdAt   Int    @default(dbgenerated("(unixepoch())")) @map("created_at")
  updatedAt   Int    @default(dbgenerated("(unixepoch())")) @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId])
  @@index([provider])
  @@map("oauth_accounts")
}

model OAuthState {
  id        String @id
  state     String @unique
  provider  String
  codeVerifier String? @map("code_verifier") // For PKCE
  redirectUrl String? @map("redirect_url")
  clientIp  String? @map("client_ip") // IP tracking for security
  nonce     String? // Additional CSRF protection
  attemptCount Int @default(0) @map("attempt_count") // Rate limiting per state
  expiresAt Int    @map("expires_at")
  createdAt Int    @default(dbgenerated("(unixepoch())")) @map("created_at")

  @@index([state])
  @@index([expiresAt])
  @@index([clientIp])
  @@map("oauth_states")
}

model OAuthTempRegistration {
  id           String @id
  token        String @unique
  provider     String
  providerId   String @map("provider_id")
  email        String
  providerUsername String? @map("provider_username")
  expiresAt    Int    @map("expires_at")
  createdAt    Int    @default(dbgenerated("(unixepoch())")) @map("created_at")

  @@index([token])
  @@index([expiresAt])
  @@map("oauth_temp_registrations")
}

model OrganizationInvitation {
  id         String @id
  organizationId     String @map("organization_id")
  email      String
  token      String @unique
  invitedBy  String @map("invited_by")
  expiresAt  Int    @map("expires_at")
  createdAt  Int    @default(dbgenerated("(unixepoch())")) @map("created_at")

  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter User @relation("inviter", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([organizationId])
  @@index([email])
  @@index([expiresAt])
  @@map("organization_invitations")
}

model DeviceCode {
  id           String  @id
  deviceCode   String  @unique @map("device_code")
  userCode     String  @unique @map("user_code")
  isApproved   Boolean @default(false) @map("is_approved")
  userId       String? @map("user_id") // Nullable until approved
  clientId     String  @map("client_id") // Which client (e.g., "cli", "vscode")
  scope        String? // OAuth2 scopes
  expiresAt    Int     @map("expires_at")
  interval     Int     @default(5) // Polling interval in seconds
  attemptCount Int     @default(0) @map("attempt_count")
  lastAttempt  Int?    @map("last_attempt")
  createdAt    Int     @default(dbgenerated("(unixepoch())")) @map("created_at")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deviceCode])
  @@index([userCode])
  @@index([expiresAt])
  @@map("device_codes")
}

model CliToken {
  id          String  @id
  userId      String  @map("user_id")
  tokenHash   String  @unique @map("token_hash")
  name        String  @default("CLI Token")
  clientId    String  @map("client_id") // Which client issued this token
  lastUsedAt  Int?    @map("last_used_at")
  expiresAt   Int?    @map("expires_at")
  scope       String? // OAuth2 scopes
  createdAt   Int     @default(dbgenerated("(unixepoch())")) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tokenHash])
  @@index([userId])
  @@index([expiresAt])
  @@map("cli_tokens")
}
